---
- name: check if the chocolatey nupkg is added
  win_stat:
    path: '{{ opt_chocolatey_server_path }}\chocolatey.server\App_Data\Packages\chocolatey'
  register: pri_chocolatey_server_chocolatey_package

- name: install chocolatey from local path if specified
  win_copy:
    src: '{{ opt_chocolatey_server_chocolatey_path }}'
    dest: '{{ opt_chocolatey_server_path }}\chocolatey.server\App_Data\Packages\'
    remote_src: yes
  notify:
  - reload chocolatey packages
  when:
  - opt_chocolatey_server_chocolatey_path is defined
  - not pri_chocolatey_server_chocolatey_package.stat.exists

- name: install chocolatey from url if specified
  win_get_url:
    url: '{{ opt_chocolatey_server_chocolatey_url }}'
    dest: '{{ opt_chocolatey_server_path }}\chocolatey.server\App_Data\Packages'
    remote_src: yes
  notify:
  - reload chocolatey packages
  when:
  - opt_chocolatey_server_chocolatey_url is defined
  - not pri_chocolatey_server_chocolatey_package.stat.exists

- name: set API token
  win_lineinfile:
    path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
    line: '    <add key="apiKey" value="{{ opt_chocolatey_server_api_token }}" />'
    regexp: '<add key="apiKey" value="'
    state: present
  when: opt_chocolatey_server_api_token is defined

- name: set maxAllowedContentLength for the max package size specified
  win_lineinfile:
    path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
    line: '        <requestLimits maxAllowedContentLength="{{ opt_chocolatey_server_max_package_size }}" />'
    regexp: '<requestLimits maxAllowedContentLength="'
    state: present

- name: set maxRequestLength for the max package size specified
  win_lineinfile:
    path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
    backrefs: yes
    # this is specified in KiB not bytes so we need to convert it ourselves
    line: '$1<httpRuntime targetFramework="$2" executionTimeout="$3" maxRequestLength="{{ opt_chocolatey_server_max_package_size // 1024 }}" />'
    regexp: '(\s*)<httpRuntime targetFramework="([\d.]*)" executionTimeout="(\d*)" maxRequestLength="[\w\d.]*" \/>'
    state: present

- name: configure basic authentication
  block:

  - name: set credentials password format to SHA1
    win_lineinfile:
      path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
      line: '    <credentials source="Inline" passwordFormat="SHA1">'
      regexp: '<credentials source="Inline" passwordFormat="'
      state: present

  - name: remove default username entry
    win_lineinfile:
      path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
      line: '{{ item }}'
      state: absent
    with_items:
    - '      <!-- remove or change this user -->'
    - '      <user name="choco" password="rocks" />'
    - '      <!-- add users here -->'

  - name: add each credential specified for basic auth
    win_lineinfile:
      path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
      insertbefore: '\s*</credentials>'
      line: '      <user name="{{ item }}" password="{{ opt_chocolatey_server_credentials[item] }}" />'
      regexp: '<user name="{{ item }}" password="'
      state: present
    with_items: '{{ opt_chocolatey_server_credentials.keys()|sort }}'  # for test expectation we want to preserve alphabetical order of the keys
    no_log: yes  # while we are dealing with hashes we shouldn't log this task

  - name: deny anonymous user access
    win_lineinfile:
      path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
      backrefs: yes
      line: '$1<deny users="?" />'
      regexp: '(\s*)<allow users="\?" \/>'
      state: present

  - name: force local Chocolatey package if it was added
    win_lineinfile:
      path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
      line: '    <add key="forceLocalChocolateyPackage" value="true"/>'
      regexp: '<add key="forceLocalChocolateyPackage" value="'
      state: present
    when: opt_chocolatey_server_chocolatey_path is defined or opt_chocolatey_server_chocolatey_url is defined

  when: opt_chocolatey_server_credentials is defined

- name: allow anonymous access if no credentials were specified
  block:

  - name: allow anonymous user access
    win_lineinfile:
      path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
      backrefs: yes
      line: '$1<allow users="?" />'
      regexp: '(\s*)<deny users="\?" \/>'
      state: present

  - name: do not force local Chocolatey package when not on basic auth
    win_lineinfile:
      path: '{{ opt_chocolatey_server_path }}\chocolatey.server\web.config'
      line: '    <add key="forceLocalChocolateyPackage" value="false"/>'
      regexp: '<add key="forceLocalChocolateyPackage" value="'
      state: present

  when: opt_chocolatey_server_credentials is not defined
